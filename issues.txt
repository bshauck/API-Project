
ISSUES
Figure out default image sizes and layout
Use placeholders when users have not contributed enough images
Have SpotForm show first 4 validation error messages to side of label
Comma misplaced on Create Spot (city, state)
Add buttons to page through more spots than default page size
Change default page size back to 20 (from 50), and track how you do
  listing of landing spots, and maintain that, and know page being
  displayed through renders


Subheading size too large
Subheading weight too heavy
Regular text too large
Heading weight somewhat more
Textarea needs to extend across
L/R edges of most elements need to align
Submit button needs to be centered and colored
Remove DEFAULT button (LAST THING)
Confirm spot image creation working NO
Have reasonable image sizing (tiles should be 3x6)
CSS Delete Spot modal
CSS not-logged-in menu
CSS sign up dialog form

Adding Fake descriptive text for host
Adding divider on Spot details

Understanding entire flow of error-handling and implementing correctly
from front request with thunk to thunk fetch (I understand backend, and
csrfFetch checking status code and throwing error when code >= 400) (decoration
suggested removing the csrfFetch throw, just checking the error code, using
async/await; changed login modal handling but need to do that for signup;
long term do better with then.catch consistency)
If we do throws from thunk then all app code has to have catch and handle throws;
instead we do returns from thunk and only check for thing.errors.

Better understanding of Promise .then.catch
Knowing when things may be promises; and why some things that are
    Promises are sometimes, are also not sometimes
    e.g., response from fetch does not always understand .JSON


FINALLY CSS
Form placeholder text lighter
price "night", star rating "review" both darker
Generate better, larger amount of data

BUGS:
Login on error (invalid password/credential) changes size,
and a sliver of a modalDiv appears underneath main modal

LONGTERM
Figure out DB table constraints syntax for Sequelize for Sqlite3 & PostGreSQL (probably have to be literal SQL), and implementing
appropriate table constraints which match application constraints where possible and put into migration files (better protection against bad seeding; although may make historical seeding hard; so may have to skip date checking)
Put console logs at beginning of all component functions and just before
return statements, and check that ACTUAL re-rendering is minimal.
Use db transactions to rollback multi-table changes when errors occur after 1st table succeeds
Switch to RTK and RTK Query
Switch to Vite instead of CRA
Change all READ items to GOT (past of GET)
Make names more explicit (no "plain" ids)
Figure out Render transfer approach
Coalesce spot delete and review delete modals
 (probably can put futureBookingDelete in there too, and review/spot Images)




It looks like the big issue for me is useRef()--other than top-level initialization--should only be read/written in effects and event handlers; the ref shouldn't be accessed--even read(!)--in the rest of top-level code. (Although it currently works; docs warn against relying on that.) So; I'll actually have to use useState() the "wrong" way, as a useRef, to be able to access a ref outside of those areas. But as I said, doing const [ref] = useState({current:{}}) and only doing ref.current[key] = value will avoid doing rerenders, but keep info across renders. When I have time for more API changes (I've done quite a few, as well as redoing my store shape hugely), then I will be able to do useEffect with useRef without feeling like everything will cause useless rerenders. (The main reason I'm doing this is to avoid unnecessary duplications of db calls; which more correctly should probably be done with the '...loading' notion strewn throughout the store; although perhaps a separate slice that is just about attempted db calls is cleaner.) The challenge when thinking of an approach scaling to huge numbers of data is that you cannot use, say, something that "looks at all spots"; so you really need things that just get a small set of ids and then be dependent on changes to a small number of spots; not on all of them. But to do that, you need to know the ids for that number to register the correct small interests.
